Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.

The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.

Example 1:

Input: 

           1
         /   \
        3     2
       / \     \  
      5   3     9 

Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
Example 2:

Input: 

          1
         /  
        3    
       / \       
      5   3     

Output: 2
Explanation: The maximum width existing in the third level with the length 2 (5,3).
Example 3:

Input: 

          1
         / \
        3   2 
       /        
      5      

Output: 2
Explanation: The maximum width existing in the second level with the length 2 (3,2).
Example 4:

Input: 

          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
Output: 8
Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).


Note: Answer will in the range of 32-bit signed integer.

//cpp my solution not fast though

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        TreeNode* pNode = root;
        unsigned long ans=0;
        if(root == NULL)
            return ans;
        
        vector<pair<TreeNode*,unsigned long>> track;
        track.push_back(make_pair(root,1));
        
        while(track.size()>0){
            vector<pair<TreeNode*,unsigned long>> tmp;
            unsigned long left=-1,right=-1;
            
            for(auto p:track){
                if(p.first!=NULL){
                    if(left == -1)
                        left = p.second;
                    else
                        right = p.second;
                    
                    tmp.push_back(make_pair(p.first->left,2*p.second-1));
                    tmp.push_back(make_pair(p.first->right,2*p.second));
                }
            }
            
            right= right==-1?left:right;
            ans = max(ans,right-left+1);
            track = tmp;
        }
        
        return (int)ans;
    }
};

//cpp recursive solution faster then above 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        return (int)dfs(root, 0, 1, vector<pair<unsigned long, unsigned long>>() = {});
    }
    
    unsigned long dfs(TreeNode* root,unsigned long level,unsigned long order, vector<pair<unsigned long,unsigned long>>& vec){
        if(root == NULL)return 0;
        if(vec.size() == level)vec.push_back({order, order});
        else vec[level].second = order;
        return max({vec[level].second - vec[level].first + 1, dfs(root->left, level + 1, 2*order, vec),         dfs(root->right, level + 1, 2*order + 1, vec)});
    }
};
