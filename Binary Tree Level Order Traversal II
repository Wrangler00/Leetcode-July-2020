Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

//cpp my solution

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> ans;

        if(root == NULL)
            return ans;
        
        vector<TreeNode*> record;
        record.push_back(root);
        
        while(record.size()!=0){
            int sz = record.size();
            vector<TreeNode*> tmp;
            vector<int> tmp_val;
            
            for(int i=0;i<sz;i++){
                TreeNode* cur = record[i];
                tmp_val.push_back(cur->val);
                if(cur->left!=NULL){
                    tmp.push_back(cur->left);    
                }
                if(cur->right!=NULL){
                    tmp.push_back(cur->right);    
                }
            }
            
            record = tmp;
            ans.push_back(tmp_val);
        }
        
        reverse(ans.begin(),ans.end());
        
        return ans;
    }
};


//cpp recursive solution using level logic [not my solution]

class Solution {
public:
    void dfs(TreeNode* root, int layer, vector<vector<int>> &res) {
        if (res.size() < layer + 1) res.push_back({});
        res[layer].push_back(root->val);
        if (root->left) dfs(root->left, layer + 1, res);
        if (root->right) dfs(root->right, layer + 1, res);
    }
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        if (!root) return {};
        vector<vector<int>> res;
        dfs(root, 0, res);
        reverse(begin(res), end(res));
        return res;
    }
};
