Given two binary trees, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical and the nodes have the same value.

Example 1:

Input:     1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

Output: true
Example 2:

Input:     1         1
          /           \
         2             2

        [1,2],     [1,null,2]

Output: false
Example 3:

Input:     1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

Output: false

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 
 //cpp my solution
class Solution {
    bool ans=true;
public:
    void recurse(TreeNode* pNode, TreeNode* qNode){
        if(pNode == NULL || qNode == NULL){
            if(pNode == NULL && qNode ==NULL)
                return;
            else{
                ans = false;
                return;
            }
        }
        
        if(pNode->val != qNode->val){
            ans=false;
            return;
        }
        
        recurse(pNode->left,qNode->left);
        recurse(pNode->right,qNode->right);
    }
    
    bool isSameTree(TreeNode* p, TreeNode* q) {
        recurse(p,q);
        return ans;
    }
};
