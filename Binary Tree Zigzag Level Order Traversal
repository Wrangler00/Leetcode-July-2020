Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

//cpp my solution

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if(!root)
            return ans;
        bool alter = false;
        
        vector<TreeNode*> node = {root};
        
        while(node.size()>0){
            vector<TreeNode*> tmp;
            vector<int> part;
            for(auto v: node){
                part.push_back(v->val);
                if(v->left) tmp.push_back(v->left);
                if(v->right) tmp.push_back(v->right);
            }
            
            if(alter)
                reverse(part.begin(),part.end());
            ans.push_back(part);
            node = tmp;
            alter = !alter;
        }
        
        return ans;
    }
};
