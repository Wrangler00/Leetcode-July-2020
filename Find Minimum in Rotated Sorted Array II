Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

The array may contain duplicates.

Example 1:

Input: [1,3,5]
Output: 1
Example 2:

Input: [2,2,2,0,1]
Output: 0

//cpp my solution (but this is too slow)

class Solution {
int ans,sz;
vector<int> n;
public:
    void bin(int l,int r){
        if(l>r)
            return;
        int mid = (l+r)/2;
        
        if(n[mid] == n[0]){
            bin(mid+1,r);
            bin(l,mid-1);
        }else if(n[mid]>n[0]){
            bin(mid+1,r);
        }else{
            ans = min(ans,n[mid]);
            bin(l,mid-1);
        }
    }
    int findMin(vector<int>& _n) {
        n = _n;
        sz = n.size();
        
        if(n[0]<n[sz-1])
            return n[0];
        
        ans=n[0];
        bin(0,sz-1);
        
        return ans;
    }
};
