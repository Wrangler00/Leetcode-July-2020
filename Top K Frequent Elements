Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
It's guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.
You can return the answer in any order.


//cpp using min heap (priority queue)

vector<int> topKFrequent(vector<int>& n, int k) {
        vector<int> ans;
        int sz = n.size();
        unordered_map<int,int> mp;
        
        for(auto v:n) mp[v]++;
        
        priority_queue<pair<int,int> , vector<pair<int,int>>, greater<pair<int,int>>> pq;
        for(auto v: mp){
            pq.push(make_pair(v.second,v.first));
            if((int)pq.size()>k) pq.pop();
        }
        
        while(!pq.empty()){
            ans.push_back(pq.top().second);
            pq.pop();
        }
        return ans;
    }

//cpp original slower solution O(nLogn)

class Solution {
public:
    vector<int> topKFrequent(vector<int>& n, int k) {
        vector<int> ans;
        int sz = n.size();
        sort(n.begin(),n.end());
        vector<pair<int,int>> v;
        
        
        int last = n[0],count=0;
        for(int i=0;i<sz;i++){
            if(n[i]==last){
                ++count;
            }else{
                v.push_back(make_pair(count,last));
                last=n[i];
                count=1;
            }
        }
        
        v.push_back(make_pair(count,last));
        sort(v.begin(),v.end(),greater<pair<int,int>>());
        
        for(int i=0;i<k;i++){
            ans.push_back(v[i].second);
        }
        
        return ans;
    }
};
