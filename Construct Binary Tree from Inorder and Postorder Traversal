Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7


//cpp not my solution

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int postInd,insz;
    vector<int> in; 
    vector<int> post;
    unordered_map<int,int> mp;
public:
    TreeNode* buildTree(int inStart,int inEnd){
        if(inStart>inEnd)
            return nullptr;
        
        TreeNode* pNode = new TreeNode(post[postInd--]);
        
        if(inStart == inEnd)
            return pNode;
        
        int inInd = mp.at(pNode->val);
        
        pNode->right = buildTree(inInd+1,inEnd);
        pNode->left = buildTree(inStart,inInd-1);
        
        
        return pNode;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        in = inorder;
        post = postorder;
        insz = inorder.size();
        postInd = insz-1;
        
        for(int i=0;i<insz;i++){
            mp[inorder[i]] = i;
        }
        
        TreeNode* root = buildTree(0,postInd);
        
        return root;
    }
};
